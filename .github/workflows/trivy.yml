name: Trivy Security Scan

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

permissions:
  actions: write
  contents: read

jobs:
  update-trivy-db:
    runs-on: ubuntu-latest
    outputs:
      should_update: ${{ steps.should_update.outputs.result }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore last update timestamp
        uses: actions/cache@v4
        with:
          path: .last_update
          key: trivy-last-update-${{ github.run_id }}
          restore-keys: |
            trivy-last-update-

      - name: Determine if DB should be updated
        id: should_update
        run: |
          now=$(date +%s)
          if [ -f .last_update ]; then
            last=$(cat .last_update)
            diff=$((now - last))
            echo "Last update was $diff seconds ago"
            if [ "$diff" -lt 180 ]; then  # 180s = 3 phÃºt
              echo "result=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          echo "result=true" >> $GITHUB_OUTPUT

      - name: Update Trivy DB
        if: steps.should_update.outputs.result == 'true'
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: 'image'
          image-ref: 'alpine:latest'
          download-db-only: true

      - name: Save last update timestamp
        if: steps.should_update.outputs.result == 'true'
        run: date +%s > .last_update

      - name: Cache timestamp
        if: steps.should_update.outputs.result == 'true'
        uses: actions/cache@v4
        with:
          path: .last_update
          key: trivy-last-update-${{ github.run_id }}

  trivy-scan:
    needs: update-trivy-db
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Trivy DB cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: 'fs'
          security-checks: 'vuln,config,secret'
          format: 'json'
          output: './trivy-scan-results.json'
          output: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy scan results as artifact
        if: success()  # Upload artifact only if the previous steps were successful
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: ./trivy-scan-results.json  # Path to the result file you want to upload
